diff --git a/core/modules/menu_ui/src/MenuForm.php b/core/modules/menu_ui/src/MenuForm.php
index 0bee996..ed36469 100644
--- a/core/modules/menu_ui/src/MenuForm.php
+++ b/core/modules/menu_ui/src/MenuForm.php
@@ -449,13 +449,17 @@ protected function submitOverviewForm(array $complete_form, FormStateInterface $
     // parent. To prevent this, save items in the form in the same order they
     // are sent, ensuring parents are saved first, then their children.
     // See https://www.drupal.org/node/181126#comment-632270.
-    $order = is_array($input) ? array_flip(array_keys($input)) : [];
-    // Update our original form with the new order.
-    $form = array_intersect_key(array_merge($order, $form), $form);
+    $order = is_array($input) ? array_keys($input) : [];
 
     $fields = ['weight', 'parent', 'enabled'];
     $form_links = $form['links'];
-    foreach (Element::children($form_links) as $id) {
+
+    $children = Element::children($form_links);
+
+    // Update our original form with the new order.
+    $links = array_intersect_key($order, $children);
+
+    foreach ($links as $id) {
       if (isset($form_links[$id]['#item'])) {
         $element = $form_links[$id];
         $updated_values = [];
diff --git a/core/modules/menu_ui/src/Tests/MenuTest.php b/core/modules/menu_ui/src/Tests/MenuTest.php
index dde9502..835166d 100644
--- a/core/modules/menu_ui/src/Tests/MenuTest.php
+++ b/core/modules/menu_ui/src/Tests/MenuTest.php
@@ -84,6 +84,7 @@ public function testMenu() {
 
     $this->menu = $this->addCustomMenu();
     $this->doMenuTests();
+    $this->doMenuReparentTests();
     $this->doTestMenuBlock();
     $this->addInvalidMenuLink();
     $this->addCustomMenuCRUD();
@@ -467,6 +468,80 @@ public function doMenuTests() {
     // Save menu links for later tests.
     $this->items[] = $item1;
     $this->items[] = $item2;
+    $this->items[] = $item3;
+    $this->items[] = $item4;
+    $this->items[] = $item5;
+    $this->items[] = $item6;
+  }
+
+  /**
+   * Tests menu reparent functionality.
+   */
+  function doMenuReparentTests() {
+
+    $menu_name = $this->menu->id();
+
+    $item1 = $this->items[0];
+    $item2 = $this->items[1];
+    $item3 = $this->items[2];
+    $item4 = $this->items[3];
+    $item5 = $this->items[4];
+    $item6 = $this->items[5];
+
+    // Hierarchy
+    // <$menu_name>
+    // - item1
+    // - item4
+    // -- item5
+    // --- item2
+    // ---- item3
+    // -- item6
+
+    // Move link and verify that descendants are updated.
+    $this->moveMenuLink($item4, $item1->getPluginId(), $menu_name);
+    $this->moveMenuLink($item6, $item3->getPluginId(), $menu_name);
+
+    // Hierarchy
+    // <$menu_name>
+    // - item1
+    // -- item4
+    // --- item5
+    // ---- item2
+    // ----- item3
+    // ------ item6
+
+    $this->assertMenuLink($item1->getPluginId(), [
+      'children' => [$item4->getPluginId(), $item5->getPluginId(), $item6->getPluginId(), $item2->getPluginId(), $item3->getPluginId()],
+      'parents' => [$item1->getPluginId()],
+      // See above.
+      'langcode' => 'en',
+    ]);
+    $this->assertMenuLink($item4->getPluginId(), [
+      'children' => [$item5->getPluginId(), $item6->getPluginId(), $item2->getPluginId(), $item3->getPluginId()],
+      'parents' => [$item1->getPluginId(),$item4->getPluginId()],
+      // See above.
+      'langcode' => 'en',
+    ]);
+
+    $this->assertMenuLink($item5->getPluginId(), [
+      'children' => [$item2->getPluginId(), $item3->getPluginId(),$item6->getPluginId()],
+      'parents' => [$item1->getPluginId(),$item5->getPluginId(), $item4->getPluginId()],
+      // See above.
+      'langcode' => 'en',
+    ]);
+    $this->assertMenuLink($item2->getPluginId(), [
+      'children' => [$item3->getPluginId(),$item6->getPluginId()],
+      'parents' => [$item1->getPluginId(), $item2->getPluginId(), $item5->getPluginId(), $item4->getPluginId()],
+      // See above.
+      'langcode' => 'en',
+    ]);
+    $this->assertMenuLink($item3->getPluginId(), [
+      'children' => [$item6->getPluginId()],
+      'parents' => [$item1->getPluginId(), $item3->getPluginId(), $item2->getPluginId(), $item5->getPluginId(), $item4->getPluginId()],
+      // See above.
+      'langcode' => 'en',
+    ]);
+
   }
 
   /**
